/**
* @file HomeWork01.cpp
* 
* @author Cary Willard
* @date 2012-08-28
* 
* @note This file is (c) 2012.  It is licensed under the
* CC gv 3.0 license (http://creativecommons.org/licenses/by/3.0/),
* which means you are free to use, share, and remix is as long as you
* give attribution.  Commercial uses are allowed.
* 
* This project was written for credit in Dr. Brinkman's CSE 274 class at
* Miami University during the fall semester of 2012.
*
* This project was heavily influenced by Dr. Brinkman's HW01 project:
* https://github.com/brinkmwj/HW01
* 
* This project fulfills the following requirements for homework 1:
* 
*
*/


#include "cinder/app/AppBasic.h"
#include "cinder/gl/gl.h"
#include "cinder/gl/Texture.h"
#include "cinder/ImageIo.h"
#include "Resources.h"

using namespace ci;
using namespace ci::app;
using namespace std;

class HomeWork01App : public AppBasic {
  public:
	void setup();
	void mouseDown( MouseEvent event );	
	void update();
	void draw();
	void preSettings(Settings* settings);

private:
	static const int kWinWidth = 1024;
	static const int kWinHeight = 1024;
	static const int kSurfaceSize=1024;

	// Strobe Variables & Constants
	int currentFrame;
	int red;
	int green;
	int blue;
	double redStrobePeriod;
	double greenStrobePeriod;
	double blueStrobePeriod;
	int strobeDivisor;
	int redAmp;
	int greenAmp;
	int blueAmp;
	float strobeInterval;
	int color;
	float redF;
	float greenF;
	float blueF;


	Surface* mySurface_;
	uint8_t* myPixels;
	uint8_t* blurArray_;
	void blackOutWindow(uint8_t* pixels);
	double pi();
	void strobe(int currentFrame);
	void ifStrobe();
	void blur(uint8_t* pixels,uint8_t* blurArray_);
	void drawLine(uint8_t* pixels,int x1,int y1,int x2,int y2,int lineThickness,Color8u c);
	void drawCircle(uint8_t* pixels,int x, int y, int r, Color8u c);
	void drawSquare(uint8_t* pixels,int x, int y, int r, int lineThickness, Color8u c);
	void drawRectangle(uint8_t* pixels,int x, int y, int width, int height, Color8u c);
	void drawDiamond(uint8_t* pixels,int center_x, int center_y, int r, Color8u c);
	void topToBottomGradient(uint8_t* pixels,Color8u c);
};

void HomeWork01App::preSettings(Settings* settings) {
	(*settings).setWindowSize(kWinWidth,kWinHeight);
}

void HomeWork01App::setup()
{
	// Strobe Variables & Constants
	currentFrame = 1;
	red = 0;
	green = 0;
	blue = 0;
	redStrobePeriod = 1;
	greenStrobePeriod = 2;
	blueStrobePeriod = 4;
	strobeDivisor = 20;
	redAmp = 0;
	greenAmp = 127;
	blueAmp = 254;
	strobeInterval = 0.01f;
	color = 1;
	redF = 0.0f;
	greenF = 0.5f;
	blueF = 1.0f;

	// Initialize mySurface_
	mySurface_ = new Surface(kSurfaceSize,kSurfaceSize,true);
	myPixels = (*mySurface_).getData();
	blurArray_ = new uint8_t[kWinWidth*kWinHeight*3];


	blackOutWindow(myPixels);
	//drawLine(myPixels,100,300,300,100,5,Color(127,127,127));//Up slope
	//drawLine(myPixels,310,110,110,310,5,Color(127,127,127));//Parallel Up slope
	//drawLine(myPixels,100,300,300,600,5,Color(127,127,127));// Down slope
	//drawLine(myPixels,100,300,400,300,5,Color(127,127,127));// Horizontal <- This draws
	//drawLine(myPixels,100,400,100,400,5,Color(127,127,127));// Vertical

	//drawCircle(myPixels,300, 350, 5, Color(0,0,0));
	//drawSquare(myPixels,300, 350, 100, 5, Color(0,0,0));
	//drawRectangle(myPixels,300,100,50,100,5,Color(0,0,0));
	//drawDiamond(myPixels,400, 450, 100, 100, 5, Color(180,180,180));
}

void HomeWork01App::update()
{
	//blackOutWindow(myPixels);
	currentFrame++;
	//strobe(currentFrame);
	ifStrobe();
	//topToBottomGradient(myPixels,Color(red,green,blue));

	/*
	drawLine(myPixels,100,300,300,100,5,Color(180,180,180));//Up slope
	drawLine(myPixels,310,110,110,310,5,Color(180,180,180));//Parallel Up slope
	drawLine(myPixels,100,300,300,600,5,Color(180,180,180));// Down slope
	drawLine(myPixels,100,300,400,300,5,Color(180,180,180));// Horizontal
	drawLine(myPixels,100,400,100,400,5,Color(180,180,180));// Vertical
	*/
	//drawCircle(myPixels,300, 350, 100, Color(0,0,0));
	//drawSquare(myPixels,400, 350, 100, 5, Color(0,0,0));
	//drawRectangle(myPixels,400,400,100,100,Color(180,180,180));
	drawDiamond(myPixels,200, 200, 50, Color(180,180,180)); // REALLY REALLY HEAVY!
	//blur(myPixels,blurArray_);
}

void HomeWork01App::blackOutWindow(uint8_t* pixels)
{
	Color8u c = Color(200,200,200);

	for(int y=0; y<kSurfaceSize; y++) {
		for(int x=0; x<kSurfaceSize; x++) {
			int offset = 3*(x + y*kSurfaceSize);
			pixels[offset] = pixels[offset] + c.r; //Red
			pixels[offset+1] = pixels[offset+1] + c.g; //Green
			pixels[offset+2] = pixels[offset+2] + c.b; // Blue
		}
	}
}

double HomeWork01App::pi()
{
	return 3.141592;
}

/*
This function changes the integer variables that make up
a Color according the number of frames since the app started.
*/
void HomeWork01App::strobe(int currentFrame)
{	
double frame =  (double)currentFrame/strobeDivisor;

red = (int)(redAmp*sin(frame*pi()/redStrobePeriod));
green = (int)(greenAmp*sin(frame*pi()/greenStrobePeriod));
blue = (int)(blueAmp*sin(frame*pi()/blueStrobePeriod));

}

void HomeWork01App::ifStrobe() {

if(color == 1) {
redF = redF + strobeInterval;
greenF = greenF - (strobeInterval/2);
blueF = blueF - (strobeInterval/2);
}
if(color == 2) {
greenF = greenF + strobeInterval;
redF = redF - (strobeInterval/2);
blueF = blueF - (strobeInterval/2);
}
if(color == 3) {
blueF = blueF + strobeInterval;
redF = redF - (strobeInterval/2);
greenF = greenF - (strobeInterval/2);
}

if((redF > 1.0f)&&(color == 1)) {
color = 2;
}
if((greenF > 1.0f)&&(color == 2)) {
color = 3;
}
if((blueF > 1.0f)&&(color == 3)) {
color = 1;
}

red = redF*200;
green = greenF*200;
blue = blueF*200;
/*
red = (int)((double)((4080*redF)/16));
green = (int)((double)((4080*greenF)/16));
blue = (int)((double)((4080*blueF)/16));
*/
}

void HomeWork01App::blur(uint8_t* pixels, uint8_t* blurArray_) {
		//Convolution filters tend to overwrite the data that you need, so
		// we keep a temporary copy of the image_to_blur. There are certainly
		// more efficient ways to deal with this problem, but this is simple to
		// understand.
		static uint8_t work_buffer[3*kSurfaceSize*kSurfaceSize];
		//This memcpy is not much of a performance hit.
		memcpy(work_buffer,pixels,3*kSurfaceSize*kSurfaceSize);

		//These are used in right shifts.
		//Both of these kernels actually darken as well as blur.
		uint8_t kernelA[9] =
			{4,3,4,
			4,3,4,
			4,3,4};
		uint8_t kernelB[9] =
			{4,3,4,
			4,2,4,
			4,3,4};

		uint8_t total_red =0;
		uint8_t total_green=0;
		uint8_t total_blue =0;
		int offset;
		int k;
		int y,x,ky,kx;

		//Visit every pixel in the image, except the ones on the edge.
		//TODO Special purpose logic to handle the edge cases
	for( y=1;y<kWinHeight-1;y++){
		for( x=1;x<kWinWidth-1;x++){

			offset = 3*(x + y*kWinWidth);
			if(blurArray_[offset] < 256/3){
			//Compute the convolution of the kernel with the region around the current pixel
			//I use ints for the totals and the kernel to avoid overflow
			total_red=0;
			total_green=0;
			total_blue=0;
			for( ky=-1;ky<=1;ky++){
				for( kx=-1;kx<=1;kx++){
					offset = 3*(x + kx + (y+ky)*kSurfaceSize);
					k = kernelA[kx+1 + (ky+1)*3];
					total_red += (work_buffer[offset ] >> k);
					total_green += (work_buffer[offset+1] >> k);
					total_blue += (work_buffer[offset+2] >> k);
				}
			}
		} else if(blurArray_[offset] < 2*256/3){
			//Compute the convolution of the kernel with the region around the current pixel
			//I use ints for the totals and the kernel to avoid overflow
			total_red=0;
			total_green=0;
			total_blue=0;
			for( ky=-1;ky<=1;ky++){
				for( kx=-1;kx<=1;kx++){
					offset = 3*(x + kx + (y+ky)*kSurfaceSize);
					k = kernelB[kx+1 + (ky+1)*3];
					total_red += (work_buffer[offset ] >> k);
					total_green += (work_buffer[offset+1] >> k);
					total_blue += (work_buffer[offset+2] >> k);
				}
			}
		} else {
			offset = 3*(x + y*kSurfaceSize);
			total_red = work_buffer[offset];
			total_green = work_buffer[offset+1];
			total_blue = work_buffer[offset+2];
		}

			offset = 3*(x + y*kSurfaceSize);
			pixels[offset] = total_red;
			pixels[offset+1] = total_green;
			pixels[offset+2] = total_blue;
		}
	}
}

void HomeWork01App::drawLine(uint8_t* pixels,int x1,int y1,int x2,int y2,int lineThickness,Color8u c){
	
	if((x1==x2)&&(y1==y2)) return;
	
	int yTemp = y2;
	int xTemp = x2;

	y1 = (y1 <= y2 ? y1 : y2);
	if(y1 == y2){ y2 = yTemp;};
	x1 = ( x1 <= x2 ? x1 : x2);
	if(x1 == x2){ x2 = xTemp;};

	if(y1 == y2) {
		for(x1;x1 <= x2;x1++) {
			if(y1 < 0 || x1 < 0 || x2 >= kWinWidth || y2 >= kWinHeight) continue;
			int pix = 3*(x1+y1*kSurfaceSize);
			pixels[pix] = pixels[pix]/2 + c.r/2;
			pixels[pix] = pixels[pix+1]/2 + c.g/2;
			pixels[pix] = pixels[pix+2]/2 + c.b/2;
		}
	} else if(x1 == x2) {
		for(y1;y1 <= y2;y1++){
			if(y1 < 0 || x1 < 0 || x2 >= kWinWidth || y2 >= kWinHeight) continue;
			int pix = 3*(x1+y1*kSurfaceSize);
			pixels[pix] = pixels[pix]/2 + c.r/2;
			pixels[pix] = pixels[pix+1]/2 + c.g/2;
			pixels[pix] = pixels[pix+2]/2 + c.b/2;
		}
	} else {

		int xLength = abs(x1-x2);
		int yLength = abs(y1-y2);
		int d = (int)sqrt((double)(xLength*xLength)
			+(double)(yLength*yLength)); // Hypotenuse
		xLength = yLength*tan(acos((double)(yLength/d)));

		for(y1; y1 <= y2; y1++) {
			for(x1; x1 <= x2; x1++) {
				xLength = abs(x1-x2);
				yLength = abs(y1-y2);
				d = (int)sqrt((double)(xLength*xLength)
					+(double)(yLength*yLength)); // Hypotenuse
				xLength = yLength*tan(acos((double)(yLength/d)));
				if(x1 == (x2-xLength)) {
				if(y1 < 0 || x1 < 0 || x2 >= kWinWidth || y2 >= kWinHeight) continue;
				int pix = 3*(x1+y1*kSurfaceSize);
				pixels[pix] = pixels[pix]/2 + c.r/2;
				pixels[pix] = pixels[pix+1]/2 + c.g/2;
				pixels[pix] = pixels[pix+2]/2 + c.b/2;
				}
			}
		}
	}
}

/*
Right now, this is almost a verbatim implementation of Dr. Brinkman's drawRings method from his HW01 project.
I am analyzing it so that I can understand it well enough to improvise later.
This is why I sometimes used variable names that are unwieldy.
In short, I have no intention of leaving this method in this form.
*/
void HomeWork01App::drawCircle(uint8_t* pixels,int center_x,int center_y, int r, Color8u c)
{
	if(r <= 0) return;

	for(int y=center_y-r; y<=center_y+r; y++){
		for(int x=center_x-r; x<=center_x+r; x++){
			// Bounds test, to stop out-of-bounds memory access
			if(y < 0 || x < 0 || x >= kWinWidth || y >= kWinHeight) continue;

			int distanceFromCenter = (int)sqrt((double)((x-center_x)*(x-center_x) + (y-center_y)*(y-center_y)));
			if(distanceFromCenter <= r){
				//if((distanceFromCenter/7)%2 == 1 ){  //...(distanceFromCenter/7)
						int offset = 3*(x + y*kSurfaceSize);
						//Dr. Brinkman: "By blending the colors I get a semi-transparent effect"
						pixels[offset] = pixels[offset]/2 + c.r/2; //Red
						pixels[offset+1] = pixels[offset+1]/2 + c.g/2; //Green
						pixels[offset+2] = pixels[offset+2]/2 + c.b/2; // Blue
					//}
				}
			}	
		}
	}


void HomeWork01App::drawSquare(uint8_t* pixels,int center_x, int center_y, int r,int lineThickness, Color8u c)
{
	if(r <= 0) return;

	for(int y=center_y-r;y<=center_y+r; y++){
		for(int x=center_x-r;x<=center_x+r; x++){
			
			if(y < 0 || x < 0 || x >= kWinWidth || y >= kWinHeight) continue;

			if((x == center_x-r)||(x == center_x+r)||(y == center_y-r)||(y == center_y+r)) {

			int indeces = 3*(x + y*kSurfaceSize); // Why not (y+x*kSurfaceSize)?
			pixels[indeces] = pixels[indeces]+c.r;
			pixels[indeces] = pixels[indeces+1]+c.g;
			pixels[indeces] = pixels[indeces+2]+c.b;
			}
	}
	}
}

void HomeWork01App::drawRectangle(uint8_t* pixels,int x, int y, int width, int height, Color8u c)
{
	if(width <= 0) return;
	if(height <= 0) return;
	if(x <= 0) return;
	if(y <= 0) return;

	for(int row = y ; row <= (y+height);row++) {
		for(int col = x; col < (x+width); col++) {

			if((row == y)||(row == y+height)) {
				if((col == x)||(col == x+width)) {
			
					if(y < 0 || x < 0 || x > kWinWidth || y > kWinHeight) continue;
					int offset = 3*(y + x*kSurfaceSize);
					pixels[offset] = pixels[offset]/2 + c.r/2; //Red
					pixels[offset+1] = pixels[offset+1]/2 + c.g/2; //Green
					pixels[offset+2] = pixels[offset+2]/2 + c.b/2; // Blue
				}
			}
		}
	}
}

void HomeWork01App::topToBottomGradient(uint8_t* pixels,Color8u c){
	for(int y=0;y<kWinHeight;y++) {
		for(int x=0;x<kWinWidth;x++) {
			int offset = 3*(x + y*kSurfaceSize);
			pixels[offset] = pixels[offset]/2 + c.r/2; //Red
			pixels[offset+1] = pixels[offset+1]/2 + c.g/2; //Green
			pixels[offset+2] = pixels[offset+2]/2 + c.b/2; // Blue
		}
	}
}

// Let's rotate that square by pi/4
void HomeWork01App::drawDiamond(uint8_t* pixels,int center_x, int center_y, int r, Color8u c)
{

	int yRad=(int)sqrt((double)(r*r)+(double)(r*r));
	int xRad=0;
	if(r <= 0) return;

	for(int y=center_y-yRad;y<=center_y+yRad; y++){
		//for(int x=center_x;x<=center_x+xRad; x++){
			int xLeft=center_x-xRad;
			int xRight=center_x+xRad;

			if(y < 0 || xLeft < 0 || xRight < 0 || xLeft >= kWinWidth || xRight >= kWinWidth || y >= kWinHeight) continue;

			//if((x == center_x-xRad)||(x == center_x+xRad)) {

			int indeces = 3*(xLeft + y*kSurfaceSize);
			pixels[indeces] = pixels[indeces]+c.r;
			pixels[indeces] = pixels[indeces+1]+c.g;
			pixels[indeces] = pixels[indeces+2]+c.b;

			indeces = 3*(xRight + y*kSurfaceSize);
			pixels[indeces] = pixels[indeces]+c.r;
			pixels[indeces] = pixels[indeces+1]+c.g;
			pixels[indeces] = pixels[indeces+2]+c.b;


			//}
		if(y<center_y) {
			xRad--;
			} else if(y>=center_y) {
				xRad++;
			}
		//}
	}
}


void HomeWork01App::mouseDown( MouseEvent event )
{
}

void HomeWork01App::draw()
{
	//gl::Texture myTexture = gl::Texture( myPixels);
	gl::clear(Color(255,255,255));
	gl::draw(*mySurface_);
}

CINDER_APP_BASIC( HomeWork01App, RendererGl )



/*
void HomeWork01App::drawRectangle(uint8_t* pixels,int center_x, int center_y, int width, int height, int lineThickness, Color8u c)
{
	if(width <= 0) return;
	if(height <= 0) return;

	//lineThickness = lineThickness/2; // Center the width of the line on the true line

	for(int y=center_y-(height/2);y<=center_y+(height/2); y++){
		for(int x=center_x-(width/2);x<=center_x+(width/2); x++){

			if(
				  ((x >= center_x-(width/2))
				||(x <= center_x+(width/2)))
				||((y > center_y-(height/2))
				||(y <= center_y+(height/2)))
				) {

			if(y < 0 || x < 0 || x > kWinWidth || y > kWinHeight) continue;

			int offset = 3*(y + x*kSurfaceSize);
			pixels[offset] = pixels[offset]/2 + c.r/2; //Red
			pixels[offset+1] = pixels[offset+1]/2 + c.g/2; //Green
			pixels[offset+2] = pixels[offset+2]/2 + c.b/2; // Blue
			}
	}
	}
}
*/
